module matrix_inverse  #(
    parameter M = 6,                 // Matrix size (3x3)
    parameter WIDTH = 8,            // Bit-width
    parameter FRACTIONAL_BITS = 4    // Fixed-point fractional bits
)(
    input clk,
    input reset,
    input start,
    input signed [0:M*M*WIDTH-1] A_in,
    output reg signed [0:M*M-1][WIDTH-1:0] Inverse_out, // Modified declaration
    output reg done
);

// State machine control
reg [3:0] state;
reg [3:0] pivot_step;

reg signed [WIDTH-1:0] pivot, factor, temp, temp1;
reg signed [2*WIDTH-1:0] x;

// Augmented matrix storage
reg signed [WIDTH-1:0] augmented [0:M-1][0:2*M-1];
reg signed [WIDTH-1:0] Augmented_out[0:M*(2*M)-1];

// Variables for loops
integer i, j, swap_row,row,col;
reg found_swap;

// FSM States
localparam IDLE          = 4'b0000;
localparam INIT_AUGMENT  = 4'b0001;
localparam FIND_PIVOT    = 4'b0010;
localparam SWAP_ROWS     = 4'b0011;
localparam NORMALIZE_ROW = 4'b0100;
localparam ELIMINATE_COL = 4'b0101;
localparam BACK_SUBST    = 4'b0110;

// Initialize outputs


always @(posedge clk or posedge reset) begin
    if (reset) begin
        state <= IDLE;
        done <= 0;
        pivot_step <= 0;
        row <= 0;
        col <= 0;
        for (i = 0; i < M*M; i = i + 1) begin
            Inverse_out[i] <= 0;
        end
    end else begin
        case (state)
            // ----------------- IDLE STATE -----------------
            IDLE: begin
                if (start) begin
                    state <= INIT_AUGMENT;
                    pivot_step <= 0;
                    done <= 0;
                end
            end

            // ----------------- INITIALIZE AUGMENTED MATRIX -----------------
            INIT_AUGMENT: begin
                for (i = 0; i < M; i = i + 1) begin
                    for (j = 0; j < M; j = j + 1) begin
                        augmented[i][j] <= A_in[(i*M + j) * WIDTH +: WIDTH];
                    end
                    for (j = 0; j < M; j = j + 1) begin
                        augmented[i][j+M] <= (i == j) ? (1 << FRACTIONAL_BITS) : 0;
                    end
                end
                state <= FIND_PIVOT;
            end

            // ----------------- FIND PIVOT -----------------
            FIND_PIVOT: begin
                pivot = augmented[pivot_step][pivot_step];
                if (pivot == 0) begin
                    found_swap = 0;
                    for (swap_row = pivot_step + 1; swap_row < M; swap_row = swap_row + 1) begin
                        if (augmented[swap_row][pivot_step] != 0 && found_swap == 0) begin
                            for (j = 0; j < 2*M; j = j + 1) begin
                                temp1 = augmented[pivot_step][j];
                                augmented[pivot_step][j] = augmented[swap_row][j];
                                augmented[swap_row][j] = temp1;
                            end
                            pivot = augmented[pivot_step][pivot_step];
                            found_swap = 1;
                        end
                    end
                end
                
                if (pivot == 0) begin
                    done <= 1;
                    state <= IDLE;
                end else begin
                    state <= NORMALIZE_ROW;
                end
            end

            // ----------------- NORMALIZE ROW -----------------
            NORMALIZE_ROW: begin
                for (col = 0; col < 2*M; col = col + 1) begin
                    augmented[pivot_step][col] <= (augmented[pivot_step][col] * (1 << FRACTIONAL_BITS)) / pivot;
                end
                state <= ELIMINATE_COL;
            end

            // ----------------- ELIMINATE OTHER ROWS -----------------
            ELIMINATE_COL: begin
                if (row < M) begin
                    if (row != pivot_step) begin
                        factor = augmented[row][pivot_step];
                        for (col = 0; col < 2*M; col = col + 1) begin
                            x = factor * augmented[pivot_step][col];
                            temp = x[2*WIDTH-1:FRACTIONAL_BITS];
                            augmented[row][col] <= augmented[row][col] - temp;
                        end
                    end
                    row <= row + 1;
                    state <= ELIMINATE_COL;
                end else begin
                    pivot_step <= pivot_step + 1;
                    row <= 0;
                    state <= (pivot_step < M-1) ? FIND_PIVOT : BACK_SUBST;
                end
            end

            // ----------------- BACK SUBSTITUTION -----------------
            BACK_SUBST: begin
                for (i = 0; i < M; i = i + 1) begin
                    for (j = 0; j < M; j = j + 1) begin
                        Inverse_out[i*M + j] <= augmented[i][j+M];
                    end
                end
                done <= 1;
                state <= IDLE;
            end
        endcase
    end
end
endmodule
